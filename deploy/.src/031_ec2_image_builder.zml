DeployScript:
  ext_variables: {}
  variables:
    - SubnetPriAppA
    - SecurityGroupNode
    - BucketScript
    - BucketBackup
    - BucketImageBuilder
    - LaunchTemplateApp

CloudFormation:
  AWSTemplateFormatVersion: '2010-09-09'

  Transform: AWS::Serverless-2016-10-31

  Parameters:
    Prefix: { Type: String }
    Env: { Type: String }
    SubnetPriAppA: { Type: String }
    SecurityGroupNode: { Type: String }
    BucketScript: { Type: String }
    BucketBackup: { Type: String }
    BucketImageBuilder: { Type: String }
    LaunchTemplateApp: { Type: String }

  Resources:
    ImagePipelineApp:
      Type: AWS::ImageBuilder::ImagePipeline
      Properties:
        Name: !Cfn::Prefix App
        ImageRecipeArn: !Ref ImageRecipeApp
        InfrastructureConfigurationArn: !Ref InfrastructureConfigurationApp
        DistributionConfigurationArn: !Ref ImageDistribution
        Schedule:
          ScheduleExpression: cron(0 0 1 * ? *)  # every month

    ImageRecipeApp:
      Type: AWS::ImageBuilder::ImageRecipe
      Properties:
        Name: !Cfn::Prefix App
        Version: 1.0.0
        ParentImage: arn:aws:imagebuilder:ap-northeast-1:aws:image/amazon-linux-2023-x86/x.x.x
        Components:
          - ComponentArn: arn:aws:imagebuilder:ap-northeast-1:aws:component/update-linux/x.x.x
          - ComponentArn: arn:aws:imagebuilder:ap-northeast-1:aws:component/amazon-cloudwatch-agent-linux/x.x.x
          - ComponentArn:
              Fn::Sub:
                - arn:aws:imagebuilder:${AWS::Region}:${AWS::AccountId}:component/${ComponentName}/x.x.x
                - ComponentName: !GetAtt ComponentApp.Name
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeType: gp3
              VolumeSize: 25

    ComponentApp:
      Type: AWS::ImageBuilder::Component
      Properties:
        Name: !Cfn::Prefix app
        Version: 1.0.0
        Platform: Linux
        Data: !Sub |
          schemaVersion: 1.0
          phases:
            - name: build
              steps:
                - name: InstallNginx
                  action: ExecuteBash
                  inputs:
                    commands:
                      - set -euxo pipefail -o posix
                      - aws s3 cp s3://${BucketScript}/image-builder/setup.sh - | sudo bash -x

    InfrastructureConfigurationApp:
      Type: AWS::ImageBuilder::InfrastructureConfiguration
      Properties:
        Name: !Cfn::Prefix App
        InstanceProfileName: !Ref InstanceProfileApp
        InstanceTypes:
          - t3.micro
        SubnetId: !Ref SubnetPriAppA
        SecurityGroupIds:
          - !Ref SecurityGroupNode
        TerminateInstanceOnFailure: false
        Logging:
          S3Logs:
            S3BucketName: !Ref BucketImageBuilder

    ImageDistribution:
      Type: AWS::ImageBuilder::DistributionConfiguration
      Properties:
        Name: !Cfn::Prefix App
        Distributions:
          - Region: !Ref AWS::Region
            LaunchTemplateConfigurations:
              - LaunchTemplateId: !Ref LaunchTemplateApp
                SetDefaultVersion: true

    InstanceProfileApp:
      Type: AWS::IAM::InstanceProfile
      Properties:
        Roles:
          - !Ref RoleImageBuilder

    PolicyImageBuilder:
      Type: AWS::IAM::ManagedPolicy
      Properties:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                # sam: S3CrudPolicy
                - s3:GetObject
                - s3:ListBucket
                - s3:GetBucketLocation
                - s3:GetObjectVersion
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetLifecycleConfiguration
                - s3:PutLifecycleConfiguration
                - s3:DeleteObject
              Resource:
                - !Sub arn:aws:s3:::${BucketScript}
                - !Sub arn:aws:s3:::${BucketScript}/*
                - !Sub arn:aws:s3:::${BucketBackup}
                - !Sub arn:aws:s3:::${BucketBackup}/*
                - !Sub arn:aws:s3:::${BucketImageBuilder}
                - !Sub arn:aws:s3:::${BucketImageBuilder}/*

    RoleImageBuilder:
      Type: AWS::IAM::Role
      Properties:
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action: sts:AssumeRole
              Principal:
                Service: ec2.amazonaws.com
        ManagedPolicyArns:
          - !Ref PolicyImageBuilder
          - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
          - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
          - arn:aws:iam::aws:policy/EC2InstanceProfileForImageBuilder

  Outputs: !Cfn::ListOutputs
    ImagePipelineApp: !Ref ImagePipelineApp
    InstanceProfileApp: !Ref InstanceProfileApp
    PolicyImageBuilder: !Ref PolicyImageBuilder
    RoleImageBuilder: !Ref RoleImageBuilder
